# Copyright Amazon.com, Inc. or its affiliates. All Rights Reserved.
# SPDX-License-Identifier: MIT-0                  

# Permission is hereby granted, free of charge, to any person obtaining a copy of this
# software and associated documentation files (the "Software"), to deal in the Software
# without restriction, including without limitation the rights to use, copy, modify,
# merge, publish, distribute, sublicense, and/or sell copies of the Software, and to
# permit persons to whom the Software is furnished to do so.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,
# INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY, FITNESS FOR A
# PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT
# HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION
# OF CONTRACT, TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
# SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.        

AWSTemplateFormatVersion: "2010-09-09"
Description:
  Creating CloudFront with OAI enabled S3 Origin

Metadata:
  "AWS::CloudFormation::Interface":
    ParameterGroups:
      - Label:
          default: "S3 and CloudFront Configuration"
        Parameters:
          - BucketName
      - Label:
          default: "CloudFront Functions Name"
        Parameters:
          - CFFunctionName

    ParameterLabels:
      BucketName:
        default: "BucketName"
      CFFunctionName:
        default: "CFFunctionName"


Parameters:
  BucketName:
    Type: String
  CFFunctionName:
    Type: String

Resources:
  Bucket:
    Type: "AWS::S3::Bucket"
    Properties:
      BucketName: !Ref BucketName

  CloudFrontOriginAccessIdentity:
    Type: "AWS::CloudFront::CloudFrontOriginAccessIdentity"
    Properties:
      CloudFrontOriginAccessIdentityConfig:
        Comment: !Sub "access-identity-${Bucket}"

  BucketPolicy:
    Type: "AWS::S3::BucketPolicy"
    Properties:
      Bucket: !Ref Bucket
      PolicyDocument:
        Statement:
        - Action: "s3:GetObject"
          Effect: Allow
          Resource: !Sub "arn:aws:s3:::${Bucket}/*"
          Principal:
            CanonicalUser: !GetAtt CloudFrontOriginAccessIdentity.S3CanonicalUserId

  WaitingRoomFunction2020:
    Type: AWS::CloudFront::Function
    Properties:
      Name: !Ref CFFunctionName
      AutoPublish: true
      FunctionCode: |
        /*
         * A flag indicating whether the origin is ready to accept traffic.
         * Unlike Lambda@Edge, CloudFront Functions doesn't support network call.
         * So if you want to change this value, you need to modify then re-deploy
         * this function.
         */
        var originAcceptingTraffic = true;

        /*
         * The origin hit rate (a value between 0 and 1) specifies a percentage of
         * users that go directly to the origin, while the rest go to
         * a "waiting room." Premium users always go to the origin.  if you want to
         * change this value, you need to modify then re-deploy this function.
         */
        var originHitRate = 0.3;

        /*
         * Waiting Room Redirect URL
         */

        var FullClose = `https://aws.amazon.com/` // Change the redirect URL to your choice

        function handler(event) {
            var request = event.request;
            var uri = event.request.uri;
            var cookies = event.request.cookies;
            var premiumUserCookieValue = 'some-secret-cookie-value';

            if(!originAcceptingTraffic) {
                console.log("Origin is not accepting any traffic. " +
                            "All requests go to the Full close waiting room.");
                var response = {
                         statusCode: 302,
                         statusDescription: 'Found',
                         headers:
                                 { "location": { "value": FullClose } }
                             }
                return response;
            }

            if(cookies.hasOwnProperty("premium-user-cookie") && cookies["premium-user-cookie"].value === premiumUserCookieValue){
                console.log(`Verified Permium user cookie, this request goes to Origin cause it has Cookie with a valid secret value of "${premiumUserCookieValue}".`);
                return request;
              }

            // Lotterly to check go to origin
            if (Math.random() >= originHitRate) {
                console.log("An unlucky user goes to the waiting room.");
                request.uri = '/waitingroom.html';
                return request;
            }
            console.log("A lucky user goes to the origin.");
            return request;
        };
      FunctionConfig:
        Comment: waitingroom-functions
        Runtime: cloudfront-js-1.0


  CloudFrontDistribution:
    Type: "AWS::CloudFront::Distribution"
    Properties:
      DistributionConfig:
        PriceClass: PriceClass_All
        Origins:
        - DomainName: !GetAtt Bucket.RegionalDomainName
          Id: !Sub "S3origin-${BucketName}"
          S3OriginConfig:
            OriginAccessIdentity: !Sub "origin-access-identity/cloudfront/${CloudFrontOriginAccessIdentity}"
        DefaultRootObject: index.html
        DefaultCacheBehavior:
          TargetOriginId: !Sub "S3origin-${BucketName}"
          ViewerProtocolPolicy: redirect-to-https
          AllowedMethods:
          - GET
          - HEAD
          CachedMethods:
          - GET
          - HEAD
          DefaultTTL: 600
          MaxTTL: 600
          MinTTL: 600
          Compress: true
          ForwardedValues:
            Cookies:
              Forward: none
            QueryString: false
          FunctionAssociations:
          - EventType: viewer-request
            FunctionARN:
              Fn::GetAtt:
                - WaitingRoomFunction2020
                - FunctionARN
        HttpVersion: http2
        Enabled: true

Outputs:
  BucketName:
    Value: !Ref Bucket
  DomainName:
    Value: !GetAtt CloudFrontDistribution.DomainName
  DistributionID:
      Value: !Ref CloudFrontDistribution